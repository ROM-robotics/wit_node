#include <rclcpp/rclcpp.hpp>
#include <std_msgs/msg/string.hpp>
#include <chrono>

using namespace std::chrono_literals;

int main(int argc, char *argv[])
{
    // Initialize the ROS 2 system
    rclcpp::init(argc, argv);

    // Create a node
    auto node = rclcpp::Node::make_shared("minimal_publisher");

    // Create a publisher on a topic 'topic' with message type 'std_msgs::msg::String'
    auto publisher = node->create_publisher<std_msgs::msg::String>("topic", 10);

    rclcpp::Rate loop_rate(10);

    while(1)
    {
      auto msg = std_msgs::msg::String();
      msg.data = "rom dynamics";
      publisher->publish(msg);
      RCLCPP_INFO(node->get_logger(), "Publishing: '%s'", msg.data.c_str());
      loop_rate.sleep();
    }

    // Spin the node so it can keep running
    rclcpp::spin(node);

    // Shutdown the ROS 2 system
    rclcpp::shutdown();
    return 0;
}
